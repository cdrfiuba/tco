
interrupcion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c18  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000830  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	5b c0       	rjmp	.+182    	; 0xba <__vector_1>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	63 c0       	rjmp	.+198    	; 0x10a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "board.h"

int main(void){
	DDRC = 0xFF; //defino como salidas
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10010000; //salidas pD4 y pD7
  4a:	90 e9       	ldi	r25, 0x90	; 144
  4c:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0xFF;
  4e:	8b b9       	out	0x0b, r24	; 11
	int delay=1000;
	EICRA=0x01;
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	80 93 69 00 	sts	0x0069, r24
	EIMSK=0x01;	
  56:	8d bb       	out	0x1d, r24	; 29
 	// Se habilita la INT0
 	sei(); // Enable Interrupts
  58:	78 94       	sei

	while(1){
                PORTC = 0xF7;   //enciendo led en PC3
  5a:	47 ef       	ldi	r20, 0xF7	; 247
                _delay_ms(delay);
                PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  5c:	3b ef       	ldi	r19, 0xFB	; 251
		_delay_ms(delay);
		PORTC = 0xFF;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
		PORTD = 0x7F;
  60:	2f e7       	ldi	r18, 0x7F	; 127
		_delay_ms(delay);
		PORTD = 0xEF;
  62:	9f ee       	ldi	r25, 0xEF	; 239
	EIMSK=0x01;	
 	// Se habilita la INT0
 	sei(); // Enable Interrupts

	while(1){
                PORTC = 0xF7;   //enciendo led en PC3
  64:	48 b9       	out	0x08, r20	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	5f ef       	ldi	r21, 0xFF	; 255
  68:	6f e3       	ldi	r22, 0x3F	; 63
  6a:	78 e3       	ldi	r23, 0x38	; 56
  6c:	51 50       	subi	r21, 0x01	; 1
  6e:	60 40       	sbci	r22, 0x00	; 0
  70:	70 40       	sbci	r23, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <main+0x26>
  74:	00 c0       	rjmp	.+0      	; 0x76 <main+0x30>
  76:	00 00       	nop
                _delay_ms(delay);
                PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  78:	38 b9       	out	0x08, r19	; 8
  7a:	5f ef       	ldi	r21, 0xFF	; 255
  7c:	6f e3       	ldi	r22, 0x3F	; 63
  7e:	78 e3       	ldi	r23, 0x38	; 56
  80:	51 50       	subi	r21, 0x01	; 1
  82:	60 40       	sbci	r22, 0x00	; 0
  84:	70 40       	sbci	r23, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x3a>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x44>
  8a:	00 00       	nop
		_delay_ms(delay);
		PORTC = 0xFF;
  8c:	88 b9       	out	0x08, r24	; 8
		PORTD = 0x7F;
  8e:	2b b9       	out	0x0b, r18	; 11
  90:	5f ef       	ldi	r21, 0xFF	; 255
  92:	6f e3       	ldi	r22, 0x3F	; 63
  94:	78 e3       	ldi	r23, 0x38	; 56
  96:	51 50       	subi	r21, 0x01	; 1
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	70 40       	sbci	r23, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x50>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x5a>
  a0:	00 00       	nop
		_delay_ms(delay);
		PORTD = 0xEF;
  a2:	9b b9       	out	0x0b, r25	; 11
  a4:	5f ef       	ldi	r21, 0xFF	; 255
  a6:	6f e3       	ldi	r22, 0x3F	; 63
  a8:	78 e3       	ldi	r23, 0x38	; 56
  aa:	51 50       	subi	r21, 0x01	; 1
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	70 40       	sbci	r23, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x64>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x6e>
  b4:	00 00       	nop
		_delay_ms(delay);
		PORTD = 0xFF;
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	d5 cf       	rjmp	.-86     	; 0x64 <main+0x1e>

000000ba <__vector_1>:
                }
	}

ISR(INT0_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
PORTC = 0xF7;   //enciendo led en PC3
  ca:	87 ef       	ldi	r24, 0xF7	; 247
  cc:	88 b9       	out	0x08, r24	; 8
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	8f e3       	ldi	r24, 0x3F	; 63
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__vector_1+0x1a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x24>
  de:	00 00       	nop
_delay_ms(40);
PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  e0:	8b ef       	ldi	r24, 0xFB	; 251
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <__vector_1+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_1+0x3a>
  f4:	00 00       	nop
_delay_ms(40);
PORTC= 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	88 b9       	out	0x08, r24	; 8
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
