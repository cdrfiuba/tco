
interrupcion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000edc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000081f  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__vector_1>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	69 c0       	rjmp	.+210    	; 0x116 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "board.h"

int main(void){
	DDRC = 0xFF; //defino como salidas
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10010000; //salidas pD4 y pD7
  4a:	90 e9       	ldi	r25, 0x90	; 144
  4c:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0xFF;
  4e:	8b b9       	out	0x0b, r24	; 11
	int delay=1000;
	EICRA=0x01;
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	80 93 69 00 	sts	0x0069, r24
	EIMSK=0x01;	
  56:	8d bb       	out	0x1d, r24	; 29
 	// Se habilita la INT0
 	sei(); // Enable Interrupts
  58:	78 94       	sei

	while(1){
                PORTC = 0xF7;   //enciendo led en PC3
  5a:	77 ef       	ldi	r23, 0xF7	; 247
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5c:	4c ec       	ldi	r20, 0xCC	; 204
  5e:	51 e0       	ldi	r21, 0x01	; 1
                _delay_ms(delay);
                PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  60:	eb ef       	ldi	r30, 0xFB	; 251
		_delay_ms(delay);
		PORTC = 0xFF;
  62:	6f ef       	ldi	r22, 0xFF	; 255
		PORTD = 0x7F;
  64:	ff e7       	ldi	r31, 0x7F	; 127
		_delay_ms(delay);
		PORTD = 0xEF;
  66:	af ee       	ldi	r26, 0xEF	; 239
	EIMSK=0x01;	
 	// Se habilita la INT0
 	sei(); // Enable Interrupts

	while(1){
                PORTC = 0xF7;   //enciendo led en PC3
  68:	78 b9       	out	0x08, r23	; 8
  6a:	20 e1       	ldi	r18, 0x10	; 16
  6c:	37 e2       	ldi	r19, 0x27	; 39
  6e:	ca 01       	movw	r24, r20
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  74:	21 50       	subi	r18, 0x01	; 1
  76:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  78:	d1 f7       	brne	.-12     	; 0x6e <main+0x28>
                _delay_ms(delay);
                PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  7a:	e8 b9       	out	0x08, r30	; 8
  7c:	20 e1       	ldi	r18, 0x10	; 16
  7e:	37 e2       	ldi	r19, 0x27	; 39
  80:	ca 01       	movw	r24, r20
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8a:	d1 f7       	brne	.-12     	; 0x80 <main+0x3a>
		_delay_ms(delay);
		PORTC = 0xFF;
  8c:	68 b9       	out	0x08, r22	; 8
		PORTD = 0x7F;
  8e:	fb b9       	out	0x0b, r31	; 11
  90:	20 e1       	ldi	r18, 0x10	; 16
  92:	37 e2       	ldi	r19, 0x27	; 39
  94:	ca 01       	movw	r24, r20
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	d1 f7       	brne	.-12     	; 0x94 <main+0x4e>
		_delay_ms(delay);
		PORTD = 0xEF;
  a0:	ab b9       	out	0x0b, r26	; 11
  a2:	20 e1       	ldi	r18, 0x10	; 16
  a4:	37 e2       	ldi	r19, 0x27	; 39
  a6:	ca 01       	movw	r24, r20
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d1 f7       	brne	.-12     	; 0xa6 <main+0x60>
		_delay_ms(delay);
		PORTD = 0xFF;
  b2:	6b b9       	out	0x0b, r22	; 11
  b4:	d9 cf       	rjmp	.-78     	; 0x68 <main+0x22>

000000b6 <__vector_1>:
                }
	}

ISR(INT0_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
PORTC = 0xF7;   //enciendo led en PC3
  cc:	87 ef       	ldi	r24, 0xF7	; 247
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	20 e9       	ldi	r18, 0x90	; 144
  d2:	31 e0       	ldi	r19, 0x01	; 1
  d4:	4c ec       	ldi	r20, 0xCC	; 204
  d6:	51 e0       	ldi	r21, 0x01	; 1
  d8:	ca 01       	movw	r24, r20
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_1+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d1 f7       	brne	.-12     	; 0xd8 <__vector_1+0x22>
_delay_ms(40);
PORTC = 0b11111011; //apago led, enciendo el otro en PC2
  e4:	8b ef       	ldi	r24, 0xFB	; 251
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	20 e9       	ldi	r18, 0x90	; 144
  ea:	31 e0       	ldi	r19, 0x01	; 1
  ec:	4c ec       	ldi	r20, 0xCC	; 204
  ee:	51 e0       	ldi	r21, 0x01	; 1
  f0:	ca 01       	movw	r24, r20
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_1+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d1 f7       	brne	.-12     	; 0xf0 <__vector_1+0x3a>
_delay_ms(40);
PORTC= 0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	88 b9       	out	0x08, r24	; 8
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
